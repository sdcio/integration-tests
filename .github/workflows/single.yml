name: Reusable specific-release integration-tests

on: 
  workflow_call:
    inputs:
      schemaserver_version:
        description: "schema-server semver release (vX.Y.Z)"
        required: true
        type: string
      dataserver_version:
        description: "data-server semver release (vX.Y.Z)"
        required: true
        type: string
      cache_version:
        description: "cache semver release (vX.Y.Z)"
        required: true
        type: string
      configserver_version:
        description: "config-server semver release (vX.Y.Z)"
        required: true
        type: string
      certmanager_version:
        description: "cert-manager release (vX.Y.Z)"
        required: true
        type: string
env:
  PY_VER: "3.10"
  GO_VER: "1.23.3"

jobs:
  setup-clab-cluster-and-test:
    runs-on: sdcio-action-runners
    steps:
      - name: Set env vars
        run: |
          echo "SCHEMA_VERSION=${{ inputs.schemaserver_version }}" >> $GITHUB_ENV
          echo "DATA_VERSION=${{ inputs.dataserver_version }}" >> $GITHUB_ENV
          echo "CACHE_VERSION=${{ inputs.cache_version }}" >> $GITHUB_ENV
          echo "CONFIG_VERSION=${{ inputs.configserver_version }}" >> $GITHUB_ENV
          echo "CERT_MANAGER_VERSION=${{ inputs.certmanager_version }}" >> $GITHUB_ENV

      - name: Checkout integration-tests
        uses: actions/checkout@v4
        with:
          repository: sdcio/integration-tests
          path: integration-tests

      # Checkout config-server with specific tag if version is not v0.0.0
      # next checkout job will be skipped if this is the case
      - name: Checkout config-server
        uses: actions/checkout@v4
        if: "!contains(env.CONFIG_VERSION, 'v0.0.0')"
        with:
          ref: ${{ env.CONFIG_VERSION }}
          path: config-server
          repository: sdcio/config-server
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT

      # Checkout config-server main branch IF tag is v0.0.0
      # previous checkout job will be skipped if this is the case
      - name: Checkout config-server
        uses: actions/checkout@v4
        if: "contains(env.CONFIG_VERSION, 'v0.0.0')"
        with:
          path: config-server
          repository: sdcio/config-server
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}
          cache: pip
          cache-dependency-path: "integration-tests/tests/requirements.txt"

      - name: Install robotframework
        run: |
          pip install -r integration-tests/tests/requirements.txt

      - name: Install gNMIc
        run: |
          bash -c "$(curl -sL https://get-gnmic.openconfig.net)"
      
      - name: Install containerlab
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/netdevops/ /" | sudo tee -a /etc/apt/sources.list.d/netdevops.list
          sudo apt update && sudo apt install -y containerlab iptables
          sudo iptables -I DOCKER-USER 1 -j ACCEPT

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VER }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: iptecharch-builder
          password: ${{ secrets.GH_PAT }}

      - name: Setup SROS License
        env:
          SROS_LICENSE: ${{ secrets.SROS25_LICENSE }}
        run: |
          echo $SROS_LICENSE | tee ./integration-tests/containerlab/license-sros.txt

      - name: Deploy CI-Test-Containerlab
        env:
          CLAB_LABDIR_BASE: "/home/runner/_work/_clab"
        run: |
          sudo -E containerlab deploy -t ./integration-tests/containerlab/citest.clab.yml --reconfigure
      
      - name: Set the versions to test
        run: |
          cat ./integration-tests/artifacts/kform/configmap-input-vars.yaml.tmpl | envsubst > ./config-server/artifacts/in/configmap-input-vars.yaml
          cd ./config-server
          make artifacts
          cd -

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: ci-kind-${{ github.actor }}
          version: v0.25.0
          ignore_failed_clean: true
          #config: ./integration-tests/k8s/kind-config.yml

      - name: Make sure the default context is set
        run: |
          #./integration-tests/k8s/patch-kind-registry.sh ci-kind-${{ github.actor }}
          kubectl config set-context --current --namespace=default

      - name: Run Robot Tests 00 - Setup SDCIO
        run: |
          robot --consolecolors on -r none -l ./integration-tests/tests/out/00-setup-log --output ./integration-tests/tests/out/00-setup-out.xml ./integration-tests/tests/00-setup/

      - name: Run Robot Tests 01 - Load Schema, Apply Connection Profiles, Acquire Targets
        run: |
          robot --consolecolors on -r none -l ./integration-tests/tests/out/01-crs-log --output ./integration-tests/tests/out/01-crs-out.xml ./integration-tests/tests/01-crs/

      - name: Run Robot Tests 02 - CRUD testing
        run: |
          robot --consolecolors on -r none -l ./integration-tests/tests/out/02-crud-log --output ./integration-tests/tests/out/02-crud-out.xml ./integration-tests/tests/02-crud/

      - name: Run Robot Tests 03 - Deviations testing
        run: |
          robot --consolecolors on -r none -l ./integration-tests/tests/out/03-deviations-log --output ./integration-tests/tests/out/03-deviations-out.xml ./integration-tests/tests/03-deviations/

      # upload test reports as a zip file
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: single-robot-tests-log-config-server_${{ env.CONFIG_VERSION }}-data-server_${{ env.DATA_VERSION }}
          path: ./integration-tests/tests/out/*.html
